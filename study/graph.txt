dfs,bfs 그래프 탐색 알고리즘
dfs = 끝까지 모든 노드를 탐색하는 방법 -> 스택 : 탐색을 진행하면서 현재 노드와 인접한 노드 중 한개를 선택해 스택에 넣고 그 노드로부터 또 dfs를 수행한다.
void dfs(int x)
{
	visited[x] = true;
	cout << x << " ";
	for (int i = 0; i < graph[x].size(); i++) // 인접한 노드 사이즈만큼 탐색
	{
		int y = graph[x][i];
		if (!visited[y]) // 방문하지 않았으면 즉 visited가 False일 때 not을 해주면 True가 되므로 아래 dfs 실행
            dfs(y); // 재귀적으로 방문
	}
}

bfs = 현재 노드에서 곁가지를 모두 탐색하면서 진행하는 방법 -> queue를 이용하여 구현한다(선입선출)
현재 노드에 인접한 노드들을 모두 queue에 넣고 시작하며 queue의 원소를 하나씩 pop하면서 그와 인접한 노드들을 다시 queue에 push한다.
queue에 원소가 존재하지 않을 경우 모든 노드를 탐색하였다.

// BFS 함수 정의
void bfs(int start) {
    queue<int> q;
    q.push(start); // 첫 노드를 queue에 삽입
    visited[start] = true; // 첫 노드를 방문 처리

    // 큐가 빌 때까지 반복
    while (!q.empty()) {
        // 큐에서 하나의 원소를 뽑아 출력
        int x = q.front();
        q.pop();
        cout << x << ' ';
        // 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        for (int i = 0; i < graph[x].size(); i++) {
            int y = graph[x][i];
            if (!visited[y]) {
                q.push(y);
                visited[y] = true;
            }
        }
  
방법은 재귀함수와 스택을 이용 