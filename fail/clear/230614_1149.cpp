#include <iostream>
#include <vector>

using namespace std;

//n개의 집에 색을 칠하는데 드는 비용을 최소로 할때 드는 최소 비용
//1.연속되는 집은 서로 다른색깔
//2.3개의 집이 등장하면 모두 다른색깔이다. -> 집이 3개 초과인 경우 색의 집단이 반복된다. (123)(123)(123)...
//3. 이걸 점화식으로 표현이 가능한가? 앞의 집 3개를 색칠한 경우 나머지 모든 색이 결정된다. ->
// 1) 앞의 3개를 선택함에 따라 뒤의 모든 색의 조합이 결정되며 앞의 3개를 선택함에 따라 결정되는 비용의 최솟값을 찾아본다.
// 2) 3개 이하인 경우 똑같은 색이 3개중에 2개로 등장할수 있다. 이를 예외 처리해야한다.
// 실수 : 3개 초과일 경우 3개만 반복되는것이 아니라 초반 3개의 경우 1,3번 자리가 똑같을수 있다 다만 4번부터는 3개의 집단이 반복된다.
// 실수2 : 조건은 i번쨰 색이 i-1,i+1 번째 색과 다를것이다 즉 i-1,i+1번째 색은 같아도 된다는 뜻이다.
//따라서 p(i)를 i번째 집까지 칠하는데 드는 색의 최소 비용이라 하면 p(i) = p(i-1) + W(C(i)) (C(i)는 i번째 집의 색 C(i) != C(i-1) C = {1,2,3})
//즉 p(i)와 C(i)를 유지하면서 계속 구하면 p(n)을 구할수 있다.


int house[1001];
int color[1001];
int value;

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;
    for(int i = 0; i < n; i++){
        int x,y,z;
        cin >> x >> y >> z;
        arr[i][0] = x;
        arr[i][1] = y;
        arr[i][2] = z;
    }
    int minValue = 10000000;

    for(int i = 0   )
    
    cout << minValue;
}