병합 정렬 
-> 재귀함수를 이용하여 현재 배열을 재귀적으로 분할, 이후 각 분할된 배열을 재귀적으로 정렬하며 병합한다(merge) = O(nlogn)
배열의 크기가 n개의 배열을 병합 정렬 한다 -> n개의 배열은 분할되면서 n/2,n/4... n/n 까지 분할된다.
n 크기의 배열을 병합정렬 하는 시간 = n/2 크기의 배열 2개를 각각 병합정렬하고 두 배열을 병합하는 시간
길이 n 크기의 배열을 병합정렬 하는 시간을 cn이라 정의하면

void merges(int left, int right) {
	int mid = (left + right) / 2;
	int i = left;
	int j = mid + 1;
	int k = left; //result에 접근하기 위해 사용되는 인덱스 값

	while (i <= mid && j <= right) {
		if (arr[i] > arr[j]) {
			result[k++] = arr[j++];
		}
		// 양쪽 리스트에서 최솟값을 비교했는데 오른쪽 리스트가 더 작을 경우
		// 그대로 오른쪽 리스트의 최솟값이 결과배열에 내려오면 됩니다. -> 병합할때 크기가 가장 작은것부터 순서대로 새로운 배열에 넣는다고 생각한다.
		else {//왼쪽 리스트의 요소가 더 작을경우 왼쪽 리시트의 요소를 결과 배열에 넣는다.
			result[k++] = arr[i++];
		}
        //이미 두 배열을 정렬되어있는 상황이기 때문에 i와 j를 이용한 접근으로 1씩 증가시켜가며 접근하면서 비교하면 최소값부터 순서대로 결과 배열에 넣을수있다.
	}
    //i와 j를 이용해 병합할 두 배열에 순차적으로 접근하다 각 두 값이 두 배열의 길이 최대에 도달할 경우 접근하지 못한 남은 배열의 요소가 있다면 그 배열의 
    //요소를 결과 배열에 넣는다.
	//오른쪽 리스트에 아직 결과배열에 들어가지 못한 값이 있으면 그대로 넣어줍니다.
	if (i > mid) { // 위의 while문이 i 조건으로 인해 탈출될경우 i는 최소 mid+1 
    //-> 이는 왼쪽 배열에 대한 접근은 끝났다 다만 오른쪽 배열에 접근하지 못한 요소가 있다는 것을 의미
		while (j <= right) {
			result[k++] = arr[j++];
		}
	}
	else { // (j > right)
		while (i <= mid) {
			result[k++] = arr[i++];
		}
	}

	// 다시 원래 배열에 옮겨담는 작업
	for (int a = left; a <= right; a++) {
		arr[a] = result[a]; //결과 배열을 만들고 그 배열에 저장된 값들(정렬된 값들)을 원래 배열에 복사한다.
	}
}
void partition(int left, int right) {
	int mid;
	// 두개로 분할하고, 병합하는 과정
	// 병합 함수 merges를 보면 알 수 있듯이, while문 등으로 정렬하면서 병합하게 된다.
	if (left < right) {
		mid = (left + right) / 2;
		partition(left, mid);
		partition(mid + 1, right);
		merges(left, right);
	}
}